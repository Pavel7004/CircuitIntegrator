#+TITLE: GraphPlot
#+AUTHOR: Kovalev Pavel

Программа для моделирования работы электрической схемы, написанная на Golang.

При запуске создает png файл, содержащий график напряжения на резисторе-нагрузке, в текущей директории.

* Зависимости
- golang
#+begin_src bash
# Ubuntu:
apt install golang
# Arch Linux:
pacman -S go
#+end_src
- gonum v0.7.0

* Сборка программы
#+begin_src bash
make
#+end_src

* Описание системы ОДУ
Генератор Маркса.

В основе системы уравнений лежит зависимость напряжения на конденсаторе для RC цепей.

u = U_{0}(1-e^{-t/\tau})

Состояние системы определяется текущим напряжением на конденсаторах(C_{0}), а также значениями \tau (R*C_{0}, R_{нагр}*С_{посл}).
Количество конденсаторов равно количеству ступеней генератора.

У системы два состояния: накопление зарядов параллельно соединенными конденсаторами по очереди(заряд следующего конденсатора в
цепи линейно зависит от заряда предыдущего) и падение накопленного заряда этих конденсаторов уже соединенных последовательно на
сопротивление нагрузки.

При последовательной разрядке напряжение увеличивается кратно количеству ступеней генератора.

Разрядка конденсаторов начинается, когда напряжение на первом конденсаторе достигает напряжению пробоя замычек(U_{разр}).

При теоретическом расчете высчитывается время зарядки первого конденсатора до требуемого уровня, затем
начинается разрядка конденсатора

u = U_{зам}*e^{-t/\tau}

Использовалась информация из [[https://ocw.snu.ac.kr/sites/default/files/NOTE/Lecture_05_Marx%20generators%20and%20Marx-like%20circuits.pdf][презентации]]

X = (u_{1}, ... , u_{n})

Зарядка конденсаторов (\tau_{i} = 2*R*i*C_{0}):
f(x_{i}) = 1/\tau_{i} * (U_{0} - x_{i})

Разрядка конденсаторов (\tau = R_{нагрузки}*C_{послед}):
f(x_{i}) = -1/\tau_{i} * x_{i}

Аналитическое решение получено из формулы:
\sum_{i} u_{i} = U_{0} * \sum_{i}(1-e^{-t/\tau}) = U_{0}*N - \sum_{i} U_{0}*e^{-t/\tau}

где t = -\tau_{0}\ln(1-U_{разр}/U_{0}) - время зарядки конденсатора до U_{разр}.

* Структура программы
- pkg/circuit

  Код, относящийся к логике схемы(circuit.go).
  Определена основная структура состояния, а также
  внутренние структуры реализующие два состояния системы(charging_state.go,discharging_state.go).
  Для структур состояния определен шаблон функций(state.go), которые они
  должны реализовывать.

- pkg/graph

  Код, строящий график по заданным точкам при помощи библиотеки gonum.

- pkg/integrator

  Код, реализующий логику интегрирования.

  Определен шаблон функции и во вложенных папках расположены разные
  реализации функции интегрирования.

- pkg/cli

  Код, отвечающий за обработку аргументов командной строки.

  Доступные аргументы:

  + ~--step/-s~ шаг интегрирования (по умолчанию 0.1)

  + ~--output/-o~ имя файла с графиком (по умолчанию "result.png")

  + ~--dpi/-d~ задание dpi графика (по умолчанию 40)

  + ~--stages-count/-c~ Указание количества конденсаторов в цепи (по умолчанию 5)

  + ~--load-resistance/-l~ Указание сопротивления нагрузки (по умолчанию 10000)

* Примеры вывода
** Характеристики схемы
- Электроемкость конденсаторов (C): 1 мкФ
- Сопротивление ограничивающих резисторов (R): 5 кОм
- Напряжение источника тока (U_0): 6 кВ
- Количество ступеней конденсаторов: 5
- Напряжение пробоя замычек: 5.7 кВ
- Сопротивление нагрузки: 10 кОм

[[./misc/scheme.png]]

Запуск программы:
#+begin_src bash
./plotter -s 0.1 -o result.png
#+end_src

** Метод Эйлера vs Теория
[[./misc/euler-theory.png]]

Красная функция - теория, черная - результат интегрирования.

** Метод средней точки vs Теория
[[./misc/midpoint-theory.png]]

Красная функция - теория, черная - результат интегрирования.

** Метод Богатского-Шампина vs Теория
[[./misc/bogatskiy-shampin.png]]

Красная функция - теория, черная - результат интегрирования.

** Метод Эйлера vs Метод Богатского-Шампина
[[./misc/euler-shampin.png]]

Зеленая функция - метод Эйлера, черная - метод Богатского-Шампина.

** Метод 3/8 vs Теория
[[./misc/three-eighth-theory.png]]

Красная функция - теория, черная - результат интегрирования.

** Неявный метод средней точки vs Теория

Для схемы с одним конденсатором.

[[./misc/midpointImpl-theory.png]]

Красная функция - теория, черная - результат интегрирования.

** Оценка относительной ошибки неявного метода средней точки

Для схемы с одним конденсатором.

[[./misc/midpointImpl-differr.png]]

** Оценка относительной ошибки явного метода 3/8
[[./misc/three-eighth-theory-differr.png]]

** График зарядки-разрядки системы
[[./misc/three-eighth-multiCycle.png]]
